{"ast":null,"code":"var _jsxFileName = \"/Users/nguyenhuuan/Documents/GitHub/final-web-assignment/src/views/Analysis/GenderAnalysis/PopulationPyramid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { groupAge } from '../../../constants/analysis/analysis';\nimport Button from '@mui/material/Button'; //import Button from \"../../../components/Button/Button\";\n\nimport TextField from '@mui/material/TextField';\nimport { Bar, XAxis, YAxis, CartesianGrid, BarChart, ResponsiveContainer, Tooltip, Legend } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PopulationPyramid = () => {\n  _s();\n\n  const {\n    citizens\n  } = useSelector(state => state.citizens);\n  const rawData = caculateData(citizens, \"2021\");\n  const [year, setYear] = useState(\"2021\");\n  const [data, setData] = useState(null);\n  const styles = {\n    root: {\n      width: \"100%\",\n      boxSizing: \"border-box\"\n    },\n    pyramid: {\n      display: \"flex\",\n      alignItems: \"flex-end\",\n      background: \"white\",\n      flexWrap: \"nowrap\"\n    },\n    chart: {\n      width: \"45%\",\n      height: \"32rem\"\n    },\n    groupAge: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      marginBottom: \"2.2rem\",\n      gap: \"0.28rem\",\n      justifyContent: \"space-around\",\n      fontSize: \"1.03rem\"\n    },\n    li: {\n      width: \"4.5rem\",\n      textAlign: \"end\",\n      color: \"#9199a8\"\n    },\n    title: {\n      background: \"white\",\n      padding: \"1rem\",\n      borderTopLeftRadius: \"10px\",\n      borderTopRightRadius: \"10px\"\n    },\n    year: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      background: \"white\",\n      gap: \"1rem\",\n      paddingBottom: \"1rem\",\n      borderBottomLeftRadius: \"10px\",\n      borderBottomRightRadius: \"10px\"\n    },\n    ageStyle: {\n      textAlign: \"end\",\n      marginRight: \"-6px\",\n      marginTop: \"12px\"\n    }\n  };\n\n  const handleChange = e => {\n    setYear(e.target.value);\n  };\n\n  const handleClick = () => {\n    setData(caculateData(citizens, year));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.root,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: styles.title,\n      children: \"Th\\xE1p d\\xE2n s\\u1ED1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.pyramid,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.chart,\n        children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            layout: \"vertical\",\n            width: \"20%\",\n            height: 500,\n            data: data ? data : rawData,\n            margin: {\n              top: 20,\n              right: 20,\n              bottom: 20,\n              left: 50\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"2\",\n              stroke: \"#8c919c\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              orientation: \"bottom\",\n              type: \"number\",\n              reversed: true,\n              domain: [0, getMaxQuantity(data ? data : rawData)]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              tick: false,\n              mirror: true,\n              orientation: \"right\",\n              dataKey: \"name\",\n              type: \"category\",\n              scale: \"band\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              layout: \"vertical\",\n              dataKey: \"male\",\n              barSize: 20,\n              fill: \"#446080\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.groupAge,\n        children: [groupAge.map((element, i) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.li,\n            children: element\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 32\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: styles.ageStyle,\n          children: \"\\u0110\\u1ED9 Tu\\u1ED5i\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.chart,\n        children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            layout: \"vertical\",\n            width: 500,\n            height: 500,\n            data: data ? data : rawData,\n            margin: {\n              top: 20,\n              right: 20,\n              bottom: 20,\n              left: 50\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"2\",\n              stroke: \"#8c919c\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              orientation: \"bottom\",\n              type: \"number\",\n              domain: [0, getMaxQuantity(data ? data : rawData)]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              tick: false,\n              mirror: true,\n              dataKey: \"name\",\n              type: \"category\",\n              scale: \"band\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              layout: \"vertical\",\n              dataKey: \"female\",\n              barSize: 20,\n              fill: \"#db5858\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.year,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"standard-basic\",\n        label: \"Nh\\u1EADp n\\u0103m\",\n        variant: \"outlined\",\n        size: \"small\",\n        onChange: handleChange,\n        value: year\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClick,\n        variant: \"contained\",\n        children: \"Ph\\xE2n t\\xEDch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PopulationPyramid, \"y/N9MJDwOgdd9/6Rp/TxG4ffSSw=\", false, function () {\n  return [useSelector];\n});\n\n_c = PopulationPyramid;\n\nconst extractCitizensByAge = (citizens, from, to, year) => {\n  let a = citizens.filter(element => {\n    return year - element.dob.slice(0, 4) >= from && year - element.dob.slice(0, 4) <= to;\n  });\n  let countBoys = 0;\n  let countGirls = 0;\n  a.forEach(element => {\n    element.gender === \"male\" ? countBoys++ : countGirls++;\n  });\n  return {\n    name: `${from}-${to}`,\n    male: countBoys,\n    female: countGirls\n  };\n};\n\nconst caculateData = (citizens, year) => {\n  let result = [];\n\n  for (let i = 0; i < 90; i = i + 5) {\n    let element = extractCitizensByAge(citizens, i, i + 4, year);\n    result.push(element);\n  }\n\n  result = result.reverse();\n  console.log(result);\n  return result;\n};\n\nconst getMaxQuantity = arrayData => {\n  let maleArray = [];\n  let femaleArray = [];\n  arrayData.forEach(element => {\n    maleArray.push(element.male);\n    femaleArray.push(element.female);\n  });\n  return Math.max(...maleArray) > Math.max(...femaleArray) ? Math.max(...maleArray) : Math.max(...femaleArray);\n};\n\nexport default PopulationPyramid;\n\nvar _c;\n\n$RefreshReg$(_c, \"PopulationPyramid\");","map":{"version":3,"sources":["/Users/nguyenhuuan/Documents/GitHub/final-web-assignment/src/views/Analysis/GenderAnalysis/PopulationPyramid.js"],"names":["React","useEffect","useState","useSelector","groupAge","Button","TextField","Bar","XAxis","YAxis","CartesianGrid","BarChart","ResponsiveContainer","Tooltip","Legend","PopulationPyramid","citizens","state","rawData","caculateData","year","setYear","data","setData","styles","root","width","boxSizing","pyramid","display","alignItems","background","flexWrap","chart","height","flexDirection","marginBottom","gap","justifyContent","fontSize","li","textAlign","color","title","padding","borderTopLeftRadius","borderTopRightRadius","paddingBottom","borderBottomLeftRadius","borderBottomRightRadius","ageStyle","marginRight","marginTop","handleChange","e","target","value","handleClick","top","right","bottom","left","getMaxQuantity","map","element","i","extractCitizensByAge","from","to","a","filter","dob","slice","countBoys","countGirls","forEach","gender","name","male","female","result","push","reverse","console","log","arrayData","maleArray","femaleArray","Math","max"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {  useSelector } from 'react-redux';\nimport { groupAge } from '../../../constants/analysis/analysis';\nimport Button from '@mui/material/Button';\n//import Button from \"../../../components/Button/Button\";\nimport TextField from '@mui/material/TextField';\n\nimport {\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  BarChart,\n  ResponsiveContainer,\n  Tooltip,\n  Legend\n} from \"recharts\";\nconst PopulationPyramid = () => {\n    const { citizens } = useSelector(state => state.citizens);\n    const rawData = caculateData(citizens, \"2021\");\n    const [year, setYear] = useState(\"2021\");\n    const [data, setData] = useState(null);\n    const styles={\n        root: {\n            width: \"100%\",\n            boxSizing: \"border-box\",\n        },\n        pyramid: {\n            display: \"flex\",\n            alignItems: \"flex-end\",\n            background: \"white\",\n            flexWrap: \"nowrap\"\n        },\n        chart: {\n            width: \"45%\",\n            height: \"32rem\"\n        },\n        groupAge: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            marginBottom: \"2.2rem\",\n            gap: \"0.28rem\",\n            justifyContent: \"space-around\",\n            fontSize: \"1.03rem\",\n        },\n        li: {\n            width: \"4.5rem\",\n            textAlign: \"end\",\n            color: \"#9199a8\"\n        },\n        title: {\n            background: \"white\",\n            padding: \"1rem\",\n            borderTopLeftRadius: \"10px\",\n            borderTopRightRadius: \"10px\"\n        },\n        year: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            background: \"white\",\n            gap: \"1rem\",\n            paddingBottom: \"1rem\",\n            borderBottomLeftRadius: \"10px\",\n            borderBottomRightRadius: \"10px\"\n        },\n        ageStyle:{\n            textAlign: \"end\",\n            marginRight: \"-6px\",\n            marginTop: \"12px\"\n        }\n    }\n    const handleChange = (e) => {\n        setYear(e.target.value);\n    }\n    const handleClick = () =>{\n        setData(caculateData(citizens, year));\n    }\n    return (\n        <div style={styles.root}>\n            <h2 style={styles.title}>Tháp dân số</h2>\n            <div style={styles.pyramid}>\n                <div style={styles.chart}>\n                    <ResponsiveContainer>\n                        <BarChart\n                            layout=\"vertical\"\n                            width={\"20%\"}\n                            height={500}\n                            data={data ? data : rawData}\n                            margin={{\n                                top: 20,\n                                right: 20,\n                                bottom: 20,\n                                left: 50\n                            }}\n                        >\n                            <CartesianGrid strokeDasharray=\"2\" stroke=\"#8c919c\" />\n                            <XAxis orientation=\"bottom\" type=\"number\" reversed domain={[0, getMaxQuantity(data ? data : rawData)]}/>\n                            <YAxis tick={false} mirror={true} orientation=\"right\" dataKey=\"name\" type=\"category\" scale=\"band\" />\n                            <Tooltip />\n                            <Bar layout=\"vertical\" dataKey=\"male\" barSize={20} fill=\"#446080\" />\n                            <Legend />\n                        </BarChart>\n                    </ResponsiveContainer>\n                </div>\n                <div style={styles.groupAge}>\n                    {groupAge.map((element, i) => {\n                        return <div style={styles.li} key={i}>{element}</div>\n                    })}\n                    <p style={styles.ageStyle}>Độ Tuổi</p>\n                </div>\n                <div style={styles.chart}>\n                    <ResponsiveContainer>\n                        <BarChart\n                            layout=\"vertical\"\n                            width={500}\n                            height={500}\n                            data={data ? data : rawData}\n                            margin={{\n                                top: 20,\n                                right: 20,\n                                bottom: 20,\n                                left: 50\n                            }}\n                            >\n                            <CartesianGrid strokeDasharray=\"2\" stroke=\"#8c919c\" />\n                            <XAxis orientation=\"bottom\" type=\"number\" domain={[0, getMaxQuantity(data ? data : rawData)]}/>\n                            <Tooltip />\n                            <YAxis tick={false} mirror={true} dataKey=\"name\" type=\"category\" scale=\"band\" />\n                            <Bar layout=\"vertical\" dataKey=\"female\" barSize={20} fill=\"#db5858\" />\n                            <Legend />\n                        </BarChart>\n                    </ResponsiveContainer>\n                </div>\n            </div>\n            <div style={styles.year}>\n                <TextField id=\"standard-basic\" label=\"Nhập năm\" variant=\"outlined\" size={\"small\"} onChange={handleChange} value={year} />\n                <Button onClick={handleClick} variant=\"contained\">Phân tích</Button>\n            </div>\n        </div>\n    );\n  }\nconst extractCitizensByAge = (citizens, from, to, year) => {\n    let a =  citizens.filter(element => {\n        return year - element.dob.slice(0,4) >= from && year - element.dob.slice(0, 4) <= to;  \n    });\n    let countBoys = 0;\n    let countGirls = 0;\n    a.forEach(element => {\n        element.gender === \"male\" ? countBoys++ : countGirls++; \n    })\n    return {\n        name: `${from}-${to}`,\n        male: countBoys,\n        female: countGirls\n    }\n}\nconst caculateData = (citizens, year) => {\n    let result = [];\n    for (let i = 0 ; i<90 ; i=i + 5){\n        let element = extractCitizensByAge(citizens, i, i+4, year);\n        result.push(element);\n    }\n    result = result.reverse();\n    console.log(result);\n    return result;\n}\nconst getMaxQuantity = (arrayData) => {\n    let maleArray = [];\n    let femaleArray = [];\n    arrayData.forEach(element => {\n        maleArray.push(element.male);\n        femaleArray.push(element.female);\n    })\n    return Math.max(...maleArray) > Math.max(...femaleArray) ? Math.max(...maleArray) : Math.max(...femaleArray);\n}\nexport default PopulationPyramid;"]},"metadata":{},"sourceType":"module"}