{"ast":null,"code":"import actions from './agencies.actions';\nimport { getAllAgencies, getAgencyById, getSubAgencies } from '../../../api/apiAgencies';\nexport const loadAgenciesAsync = () => {\n  return dispatch => {\n    dispatch(actions.agenciesLoadStart());\n    getAllAgencies().then(response => dispatch(actions.agenciesLoadSuccess(response.data))).catch(error => dispatch(actions.agenciesLoadError(error.message)));\n  };\n};\nexport const loadAgencyByIdAsync = id => {\n  return dispatch => {\n    dispatch(actions.agencyIdLoadStart());\n    getAgencyById(id).then(response => dispatch(actions.agencyIdLoadSuccess(response.data))).catch(error => dispatch(actions.agencyIdLoadError(error.message)));\n  };\n};\nexport const appendAgency = agency => {\n  return dispatch => {\n    dispatch(actions.agencyAppend(agency));\n  };\n};\nexport const updateAgency = agency => {\n  return dispatch => {\n    dispatch(actions.agencyUpdate(agency));\n  };\n};\nexport const deleteAgency = id => {\n  return dispatch => {\n    dispatch(actions.agencyDelete(id));\n  };\n};\nexport const resetAgency = () => {\n  return dispatch => {\n    dispatch(actions.agencyReset());\n  };\n};\nexport const loadSubAgenciesAsync = () => {\n  return dispatch => {\n    dispatch(actions.subAgenciesLoadStart());\n    getSubAgencies().then(response => dispatch(actions.subAgenciesLoadSuccess(response.data))).catch(error => dispatch(actions.subAgenciesLoadError(error.message)));\n  };\n};","map":{"version":3,"sources":["/Users/nguyenhuuan/Documents/GitHub/citizenV/frontend/src/redux/reducers/agencies/agencies.thunk.js"],"names":["actions","getAllAgencies","getAgencyById","getSubAgencies","loadAgenciesAsync","dispatch","agenciesLoadStart","then","response","agenciesLoadSuccess","data","catch","error","agenciesLoadError","message","loadAgencyByIdAsync","id","agencyIdLoadStart","agencyIdLoadSuccess","agencyIdLoadError","appendAgency","agency","agencyAppend","updateAgency","agencyUpdate","deleteAgency","agencyDelete","resetAgency","agencyReset","loadSubAgenciesAsync","subAgenciesLoadStart","subAgenciesLoadSuccess","subAgenciesLoadError"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AAEA,SAASC,cAAT,EAAyBC,aAAzB,EAAwCC,cAAxC,QAA8D,0BAA9D;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AACnC,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACL,OAAO,CAACM,iBAAR,EAAD,CAAR;AACAL,IAAAA,cAAc,GAAGM,IAAjB,CAAsBC,QAAQ,IAAIH,QAAQ,CAACL,OAAO,CAACS,mBAAR,CAA4BD,QAAQ,CAACE,IAArC,CAAD,CAA1C,EACiBC,KADjB,CACuBC,KAAK,IAAIP,QAAQ,CAACL,OAAO,CAACa,iBAAR,CAA0BD,KAAK,CAACE,OAAhC,CAAD,CADxC;AAEH,GAJD;AAKH,CANM;AAQP,OAAO,MAAMC,mBAAmB,GAAIC,EAAD,IAAQ;AACvC,SAAOX,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACL,OAAO,CAACiB,iBAAR,EAAD,CAAR;AACAf,IAAAA,aAAa,CAACc,EAAD,CAAb,CAAkBT,IAAlB,CAAuBC,QAAQ,IAAIH,QAAQ,CAACL,OAAO,CAACkB,mBAAR,CAA4BV,QAAQ,CAACE,IAArC,CAAD,CAA3C,EACiBC,KADjB,CACuBC,KAAK,IAAIP,QAAQ,CAACL,OAAO,CAACmB,iBAAR,CAA0BP,KAAK,CAACE,OAAhC,CAAD,CADxC;AAEH,GAJD;AAKH,CANM;AAQP,OAAO,MAAMM,YAAY,GAAIC,MAAD,IAAY;AACpC,SAAOhB,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACL,OAAO,CAACsB,YAAR,CAAqBD,MAArB,CAAD,CAAR;AACH,GAFD;AAGH,CAJM;AAMP,OAAO,MAAME,YAAY,GAAIF,MAAD,IAAY;AACpC,SAAOhB,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACL,OAAO,CAACwB,YAAR,CAAqBH,MAArB,CAAD,CAAR;AACH,GAFD;AAGH,CAJM;AAMP,OAAO,MAAMI,YAAY,GAAIT,EAAD,IAAQ;AAChC,SAAOX,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACL,OAAO,CAAC0B,YAAR,CAAqBV,EAArB,CAAD,CAAR;AACH,GAFD;AAGH,CAJM;AAKP,OAAO,MAAMW,WAAW,GAAG,MAAM;AAC7B,SAAOtB,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACL,OAAO,CAAC4B,WAAR,EAAD,CAAR;AACH,GAFD;AAGH,CAJM;AAKP,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AACtC,SAAOxB,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACL,OAAO,CAAC8B,oBAAR,EAAD,CAAR;AACA3B,IAAAA,cAAc,GAAGI,IAAjB,CAAsBC,QAAQ,IAAIH,QAAQ,CAACL,OAAO,CAAC+B,sBAAR,CAA+BvB,QAAQ,CAACE,IAAxC,CAAD,CAA1C,EACiBC,KADjB,CACuBC,KAAK,IAAIP,QAAQ,CAACL,OAAO,CAACgC,oBAAR,CAA6BpB,KAAK,CAACE,OAAnC,CAAD,CADxC;AAEH,GAJD;AAKH,CANM","sourcesContent":["import actions from './agencies.actions';\n\nimport { getAllAgencies, getAgencyById, getSubAgencies } from '../../../api/apiAgencies';\n\nexport const loadAgenciesAsync = () => {\n    return dispatch => {\n        dispatch(actions.agenciesLoadStart());\n        getAllAgencies().then(response => dispatch(actions.agenciesLoadSuccess(response.data)))\n                        .catch(error => dispatch(actions.agenciesLoadError(error.message)));\n    }\n}\n\nexport const loadAgencyByIdAsync = (id) => {\n    return dispatch => {\n        dispatch(actions.agencyIdLoadStart());\n        getAgencyById(id).then(response => dispatch(actions.agencyIdLoadSuccess(response.data)))\n                        .catch(error => dispatch(actions.agencyIdLoadError(error.message)))\n    }\n}\n\nexport const appendAgency = (agency) => {\n    return dispatch => {\n        dispatch(actions.agencyAppend(agency));\n    }\n}\n\nexport const updateAgency = (agency) => {\n    return dispatch => {\n        dispatch(actions.agencyUpdate(agency));\n    }\n}\n\nexport const deleteAgency = (id) => {\n    return dispatch => {\n        dispatch(actions.agencyDelete(id));\n    }\n}\nexport const resetAgency = () => {\n    return dispatch => {\n        dispatch(actions.agencyReset());\n    }\n}\nexport const loadSubAgenciesAsync = () => {\n    return dispatch => {\n        dispatch(actions.subAgenciesLoadStart());\n        getSubAgencies().then(response => dispatch(actions.subAgenciesLoadSuccess(response.data)))\n                        .catch(error => dispatch(actions.subAgenciesLoadError(error.message)));\n    }\n}"]},"metadata":{},"sourceType":"module"}