{"ast":null,"code":"import actionTypes from './citizens.actionTypes';\nimport initialStates from './citizens.initialStates';\n\nconst citizensReducer = (state = initialStates, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case actionTypes.CITIZENS_LOAD_START:\n      return { ...state,\n        isLoadingCitizens: true\n      };\n\n    case actionTypes.CITIZENS_LOAD_SUCCESS:\n      return { ...state,\n        isLoadingCitizens: false,\n        citizens: payload\n      };\n\n    case actionTypes.CITIZENS_LOAD_ERROR:\n      return { ...state,\n        isLoadingCitizens: false,\n        errorMessage: payload\n      };\n\n    case actionTypes.CITIZEN_ID_LOAD_START:\n      return { ...state,\n        isLoadingCitizenById: true\n      };\n\n    case actionTypes.CITIZEN_ID_LOAD_SUCCESS:\n      return { ...state,\n        isLoadingCitizenById: false,\n        citizenById: payload\n      };\n\n    case actionTypes.CITIZEN_ID_LOAD_ERROR:\n      return { ...state,\n        isLoadingCitizenById: false,\n        errorMessage: payload\n      };\n\n    case actionTypes.CITIZEN_APPEND:\n      return { ...state,\n        citizens: [...state.citizens, payload]\n      };\n\n    case actionTypes.CITIZEN_UPDATE:\n      let citizens = state.citizens;\n      let index = citizens.findIndex(item => item.id === payload.id);\n\n      if (index !== -1) {\n        citizens[index] = payload;\n      }\n\n      return { ...state,\n        citizens: citizens\n      };\n\n    case actionTypes.CITIZEN_DELETE:\n      let new_citizens = state.citizens.filter(item => item.id !== payload);\n      return { ...state,\n        citizens: new_citizens\n      };\n\n    case actionTypes.AGENCY_RESET:\n      return initialStates;\n\n    case actionTypes.CITIZEN_ADD_FILTER_LIST:\n      if (payload.type === \"analysis\") {\n        return { ...state,\n          filterListAnalysis: [...payload.selectedOptions]\n        };\n      }\n\n      return { ...state,\n        filterList: [...payload.selectedOptions]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default citizensReducer;","map":{"version":3,"sources":["/Users/nguyenhuuan/Documents/GitHub/final-web-assignment/src/redux/reducers/citizens/citizens.reducer.js"],"names":["actionTypes","initialStates","citizensReducer","state","type","payload","CITIZENS_LOAD_START","isLoadingCitizens","CITIZENS_LOAD_SUCCESS","citizens","CITIZENS_LOAD_ERROR","errorMessage","CITIZEN_ID_LOAD_START","isLoadingCitizenById","CITIZEN_ID_LOAD_SUCCESS","citizenById","CITIZEN_ID_LOAD_ERROR","CITIZEN_APPEND","CITIZEN_UPDATE","index","findIndex","item","id","CITIZEN_DELETE","new_citizens","filter","AGENCY_RESET","CITIZEN_ADD_FILTER_LIST","filterListAnalysis","selectedOptions","filterList"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,wBAAxB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGF,aAAT,EAAwB;AAACG,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAxB,KAA4C;AAChE,UAAOD,IAAP;AACI,SAAKJ,WAAW,CAACM,mBAAjB;AACI,aAAO,EACH,GAAGH,KADA;AAEHI,QAAAA,iBAAiB,EAAE;AAFhB,OAAP;;AAIJ,SAAKP,WAAW,CAACQ,qBAAjB;AACI,aAAO,EACH,GAAGL,KADA;AAEHI,QAAAA,iBAAiB,EAAE,KAFhB;AAGHE,QAAAA,QAAQ,EAAEJ;AAHP,OAAP;;AAKJ,SAAKL,WAAW,CAACU,mBAAjB;AACI,aAAO,EACH,GAAGP,KADA;AAEHI,QAAAA,iBAAiB,EAAE,KAFhB;AAGHI,QAAAA,YAAY,EAAEN;AAHX,OAAP;;AAKJ,SAAKL,WAAW,CAACY,qBAAjB;AACI,aAAO,EACH,GAAGT,KADA;AAEHU,QAAAA,oBAAoB,EAAE;AAFnB,OAAP;;AAIJ,SAAKb,WAAW,CAACc,uBAAjB;AACI,aAAO,EACH,GAAGX,KADA;AAEHU,QAAAA,oBAAoB,EAAE,KAFnB;AAGHE,QAAAA,WAAW,EAAEV;AAHV,OAAP;;AAKJ,SAAKL,WAAW,CAACgB,qBAAjB;AACI,aAAO,EACH,GAAGb,KADA;AAEHU,QAAAA,oBAAoB,EAAE,KAFnB;AAGHF,QAAAA,YAAY,EAAEN;AAHX,OAAP;;AAKJ,SAAKL,WAAW,CAACiB,cAAjB;AACI,aAAO,EACH,GAAGd,KADA;AAEHM,QAAAA,QAAQ,EAAE,CAAC,GAAGN,KAAK,CAACM,QAAV,EAAoBJ,OAApB;AAFP,OAAP;;AAIJ,SAAKL,WAAW,CAACkB,cAAjB;AACI,UAAIT,QAAQ,GAAGN,KAAK,CAACM,QAArB;AACA,UAAIU,KAAK,GAAGV,QAAQ,CAACW,SAAT,CAAmBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYjB,OAAO,CAACiB,EAA/C,CAAZ;;AACA,UAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdV,QAAAA,QAAQ,CAACU,KAAD,CAAR,GAAkBd,OAAlB;AACH;;AACD,aAAO,EACH,GAAGF,KADA;AAEHM,QAAAA,QAAQ,EAAEA;AAFP,OAAP;;AAIJ,SAAKT,WAAW,CAACuB,cAAjB;AACI,UAAIC,YAAY,GAAGrB,KAAK,CAACM,QAAN,CAAegB,MAAf,CAAsBJ,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYjB,OAA1C,CAAnB;AACA,aAAO,EACH,GAAGF,KADA;AAEHM,QAAAA,QAAQ,EAAEe;AAFP,OAAP;;AAIJ,SAAKxB,WAAW,CAAC0B,YAAjB;AACI,aAAOzB,aAAP;;AACJ,SAAKD,WAAW,CAAC2B,uBAAjB;AACI,UAAGtB,OAAO,CAACD,IAAR,KAAiB,UAApB,EAA+B;AAC3B,eAAO,EACH,GAAGD,KADA;AAEHyB,UAAAA,kBAAkB,EAAE,CAAC,GAAGvB,OAAO,CAACwB,eAAZ;AAFjB,SAAP;AAIH;;AACD,aAAO,EACH,GAAG1B,KADA;AAEH2B,QAAAA,UAAU,EAAE,CAAC,GAAGzB,OAAO,CAACwB,eAAZ;AAFT,OAAP;;AAIJ;AACI,aAAO1B,KAAP;AAtER;AAwEH,CAzED;;AA2EA,eAAeD,eAAf","sourcesContent":["import actionTypes from './citizens.actionTypes';\nimport initialStates from './citizens.initialStates';\n\nconst citizensReducer = (state = initialStates, {type, payload}) => {\n    switch(type){\n        case actionTypes.CITIZENS_LOAD_START:\n            return {\n                ...state,\n                isLoadingCitizens: true\n            }\n        case actionTypes.CITIZENS_LOAD_SUCCESS:\n            return {\n                ...state,\n                isLoadingCitizens: false,\n                citizens: payload,\n            }\n        case actionTypes.CITIZENS_LOAD_ERROR:\n            return {\n                ...state,\n                isLoadingCitizens: false,\n                errorMessage: payload\n            }\n        case actionTypes.CITIZEN_ID_LOAD_START:\n            return {\n                ...state,\n                isLoadingCitizenById: true,\n            }\n        case actionTypes.CITIZEN_ID_LOAD_SUCCESS:\n            return {\n                ...state,\n                isLoadingCitizenById: false,\n                citizenById: payload\n            }\n        case actionTypes.CITIZEN_ID_LOAD_ERROR: \n            return {\n                ...state,\n                isLoadingCitizenById: false,\n                errorMessage: payload\n            }\n        case actionTypes.CITIZEN_APPEND: \n            return {\n                ...state,\n                citizens: [...state.citizens, payload]\n            }\n        case actionTypes.CITIZEN_UPDATE: \n            let citizens = state.citizens\n            let index = citizens.findIndex(item => item.id === payload.id)\n            if (index !== -1) {\n                citizens[index] = payload\n            }\n            return {\n                ...state,\n                citizens: citizens\n            }\n        case actionTypes.CITIZEN_DELETE: \n            let new_citizens = state.citizens.filter(item => item.id !== payload)\n            return {\n                ...state,\n                citizens: new_citizens\n            }\n        case actionTypes.AGENCY_RESET: \n            return initialStates\n        case actionTypes.CITIZEN_ADD_FILTER_LIST: \n            if(payload.type === \"analysis\"){\n                return {\n                    ...state,\n                    filterListAnalysis: [...payload.selectedOptions]\n                }\n            }\n            return {\n                ...state,\n                filterList: [...payload.selectedOptions]\n            }\n        default:\n            return state;\n    }\n}\n\nexport default citizensReducer;"]},"metadata":{},"sourceType":"module"}