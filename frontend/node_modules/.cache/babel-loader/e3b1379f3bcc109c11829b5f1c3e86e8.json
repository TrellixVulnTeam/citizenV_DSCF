{"ast":null,"code":"var _jsxFileName = \"/Users/nguyenhuuan/Documents/GitHub/citizenV/frontend/src/views/Analysis/LineChart.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { useSelector } from \"react-redux\";\nimport { filterCitizensFunc } from './GenderAnalysis/filterCitizensFunc';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  year: \"1980\",\n  population: 1000\n}, {\n  year: \"1990\",\n  population: 1300\n}, {\n  year: \"2000\",\n  population: 2000\n}, {\n  year: \"2010\",\n  population: 2500\n}, {\n  year: \"2020\",\n  population: 3000\n}];\n\nconst extractData = citizens => {\n  let result = [];\n\n  const getPopulation = (citizens, year) => {\n    let population = 0;\n\n    for (let i = 0; i < citizens.length; i++) {\n      citizens[i].dob.slice(0, 4) <= year && population++;\n    }\n\n    return {\n      year: year,\n      population: population\n    };\n  };\n\n  for (let i = 1960; i < 2030; i = i + 10) {\n    const a = getPopulation(citizens, i);\n    result.push(a);\n  }\n\n  return result;\n};\n\nconst PopulationLineChart = () => {\n  _s();\n\n  const styles = {\n    root: {\n      width: \"100%\",\n      height: 500,\n      minHeight: \"100%\",\n      background: \"white\",\n      borderRadius: \"10px\" // marginBottom: \"1rem\"\n\n    },\n    title: {\n      padding: \"1rem\"\n    }\n  };\n  const {\n    citizens,\n    filterListAnalysis\n  } = useSelector(state => state.citizens);\n  const filteredCitizens = filterListAnalysis.length > 0 ? filterCitizensFunc(citizens, filterListAnalysis) : citizens;\n  console.log(extractData(citizens));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.root,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.title,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"T\\xECnh h\\xECnh gia t\\u0103ng d\\xE2n s\\u1ED1 c\\u1EE7a v\\xF9ng\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: \"85%\",\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        width: 600,\n        height: 400,\n        data: extractData(filteredCitizens),\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          name: \"N\\u0103m\",\n          dataKey: \"year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"linear\",\n          dataKey: \"population\",\n          stroke: \"#8884d8\",\n          strokeWidth: 3,\n          activeDot: {\n            r: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PopulationLineChart, \"4cnHidri5x5Fq/GXHgoPhai88jA=\", false, function () {\n  return [useSelector];\n});\n\n_c = PopulationLineChart;\nexport default PopulationLineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"PopulationLineChart\");","map":{"version":3,"sources":["/Users/nguyenhuuan/Documents/GitHub/citizenV/frontend/src/views/Analysis/LineChart.js"],"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","useSelector","filterCitizensFunc","data","year","population","extractData","citizens","result","getPopulation","i","length","dob","slice","a","push","PopulationLineChart","styles","root","width","height","minHeight","background","borderRadius","title","padding","filterListAnalysis","state","filteredCitizens","console","log","top","right","left","bottom","r"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from \"recharts\";\nimport { useSelector } from \"react-redux\";\nimport {filterCitizensFunc} from './GenderAnalysis/filterCitizensFunc';\nconst data = [\n  {\n    year: \"1980\",\n    population: 1000\n  },\n  {\n    year: \"1990\",\n    population: 1300\n  },\n  {\n    year: \"2000\",\n    population: 2000\n  },\n  {\n    year: \"2010\",\n    population: 2500\n  },\n  {\n    year: \"2020\",\n    population: 3000\n  },\n  \n];\n\nconst extractData = (citizens) => {\n    let result = [];\n    const getPopulation = (citizens, year) => {\n        let population = 0;\n        for(let i = 0 ; i<citizens.length ; i++){\n            citizens[i].dob.slice(0, 4) <= year && population++;\n        }\n        return {\n            year: year,\n            population: population\n        };\n    }\n    for (let i = 1960 ; i<2030 ; i = i + 10){\n        const a = getPopulation(citizens, i);\n        result.push(a);\n    }\n    return result;\n}\n\nconst PopulationLineChart = () => {\n    const styles={\n        root:{\n          width: \"100%\",\n          height: 500,\n          minHeight: \"100%\",\n          background: \"white\",\n          borderRadius: \"10px\",\n          // marginBottom: \"1rem\"\n        },\n        title: {\n          padding: \"1rem\"\n        }\n    }\n    const {citizens, filterListAnalysis} = useSelector(state => state.citizens);\n    const filteredCitizens = filterListAnalysis.length > 0 ? filterCitizensFunc(citizens, filterListAnalysis) : citizens;\n    console.log(extractData(citizens));\n\n    return (\n        <div style={styles.root}>\n          <div style={styles.title}>\n            <h2>Tình hình gia tăng dân số của vùng</h2>\n          </div>\n            <ResponsiveContainer width=\"100%\" height=\"85%\">\n                <LineChart\n                    width={600}\n                    height={400}\n                    data={extractData(filteredCitizens)}\n                    margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5\n                    }}\n                    >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis name=\"Năm\" dataKey=\"year\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line\n                        type=\"linear\"\n                        dataKey=\"population\"\n                        stroke=\"#8884d8\"\n                        strokeWidth={3}\n                        activeDot={{ r: 10 }}\n                    />\n                </LineChart>\n            </ResponsiveContainer>\n        </div>\n    );\n}\n\nexport default PopulationLineChart;\n"]},"metadata":{},"sourceType":"module"}